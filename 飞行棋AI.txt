int levels(int color,int random)
{
    int plane_Order[4]={0};//飞机所在位置的编号
    int mark[4];//飞机是否飞完一轮的标志
    int importance_Degree[4]={0};//进行判断的依据
    int after_position[4];//如果进行操作后的下一步位置
    int plane_start[4]={40,1,14,27};//飞机的起点
    int plane_Corner[4]={37,50,11,24};//飞机进入安全通道前的位置
    int plane_FasterS[4]={5,18,31,44};//飞机快速航道起点
    int plane_FasterE[4]={17,30,43,4};//飞机快速航道终点
    int important_number[8]={-127,255,127,63,31,15,7,3};
    int allair_Order[16];
    int plane_FasterM[4]={302,402,102,202};
    int j;
    int acc=0;
    int dis[4];
    int distanceMin;
    for(int i=0;i<=3;i++){
        plane_Order[i]=plane[4*color+i][0];//将飞机现在的位置赋给数组pO[]
        if(plane_Order[i]>499){
            plane_Order[i]=0;
        }
    }
    if(random!=6&&plane_Order[0]==0&&plane_Order[1]==0&&plane_Order[2]==0&&plane_Order[3]==0){
        return 16;
    }//四个飞机都没出来且不是6，返回16
    for(j=0;j<=15;j++){
        allair_Order[j]=plane[j][0];
        if(j==4*color||j==4*color+1||j==4*color+2||j==4*color+3){
            allair_Order[j]=0;
        }//读出所有飞机的位置并将同色飞机位置置零
    }
    for(int i=0;i<=3;i++){
        mark[i]=plane[4*color+i][1];//将飞机是否飞过一轮的标志赋给数组mark[]
        if(mark[i]==1){
            importance_Degree[i]=-255;
        }else{
            plane_Order[i]=plane[4*color+i][0];//将飞机现在的位置赋给数组pO[]
            if(plane_Order[i]>499){
                plane_Order[i]=0;
            }
            mark[i]=plane[4*color+i][1];//将飞机是否飞过一轮的标志赋给数组mark[]
            if(plane_Order[i]==0&&random!=6){
                importance_Degree[i]=-255;
                break;//如果在家且骰子数不为6，赋予最小值，跳出
            }
            if((plane_Order[i]>99)&&(plane_Order[i]<499)&&
               (plane_Order[i]+random!=(color+1)*100+5)){//如果在安全通道内且不会到达终点，最低重要度
                importance_Degree[i]=importance_Degree[i]+important_number[0];
            }
            after_position[i]=plane_Order[i]+random;//现在的位置加上要走的步数之后的的初步位置
            if(random!=6&&plane_Order[i]>499){
                after_position[i]=0;//飞机在起点且骰子不是6 不动
            }
            if(plane_Order[i]<=plane_Corner[color]&&after_position[i]>plane_Corner[color]){
                after_position[i]=(color+1)*100+random+plane_Order[i]-plane_Corner[color]-1;//如果超过了拐点，进入安全通道
                if(after_position[i]!=(color+1)*100+2){//如果在绝对安全区域
                    importance_Degree[i]=importance_Degree[i]+important_number[1];//第一重要度
                }else{importance_Degree[i]=importance_Degree[i]+important_number[0];}//否则最低重要度
            }
            if(random==6&&plane_Order[i]==0&&mark[i]==0){
                after_position[i]=plane_start[color];//如果骰子为6且飞机未起飞则出飞机
                importance_Degree[i]=importance_Degree[i]+important_number[2];//第二重要度
            }
            if(after_position[i]==plane_FasterS[color]){
                after_position[i]=plane_FasterE[color]+4;//如果飞机行进后落在快速航道起点，那么飞机行至终点时再进4格
                importance_Degree[i]=importance_Degree[i]+important_number[5];
                for(j=0;j<=15;j++){
                    if(allair_Order[j]==plane_FasterM[color]){
                        importance_Degree[i]=importance_Degree[i]+important_number[3];//会被撞掉的地方有飞机，再加一个重要度  3
                    }
                }
            }
            if((after_position[i]-1)%4==color){//如果飞机到了同颜色格子
                after_position[i]=after_position[i]+4;//进四个格子
                if(after_position[i]==plane_FasterS[color]){//如果落点是快速航道起点
                    after_position[i]=plane_FasterE[color];//落点变成快速航道终点
                    importance_Degree[i]=importance_Degree[i]+important_number[5];
                    for(j=0;j<=15;j++){
                        if(allair_Order[j]==plane_FasterM[color]){
                            importance_Degree[i]=importance_Degree[i]+important_number[3];//会被撞掉的地方有飞机，再加一个重要度  3
                        }
                    }
                }else{importance_Degree[i]=importance_Degree[i]+important_number[6];}//落点不是快速航道起点重要度为6
            }
            if(after_position[i]==(color+1)*100+5){
                importance_Degree[i]=importance_Degree[i]+important_number[1]*2;//如果飞机可以立刻回家,主要度最高
            }
            for(j=0;j<=15;j++){
                if(allair_Order[j]==after_position[i]){
                    acc=acc+1;//计算可以撞掉落点有多少架飞机
                }
            }
            if(acc==1){//撞掉一架
                importance_Degree[i]=importance_Degree[i]+important_number[3];//重要度  3
            }


            if(acc==2){//撞掉两架
                importance_Degree[i]=importance_Degree[i]+important_number[4];//重要度  4
            }

            if(acc==3){//遇到3架
                importance_Degree[i]=importance_Degree[i]-127;//重要度减127
            }

            for(int p=0;p<=3;p++){
                if(mark[p]==0&&plane_Order[p]!=0){
                    dis[p]=(plane_Corner[color]+52-after_position[i])%52;
                }else{dis[p]=100;}
            }//求距离

            if(dis[0]<=dis[1]&&dis[0]<=dis[2]&&dis[0]<=dis[3]){
                distanceMin=0;
            }
            else if(dis[1]<=dis[0]&&dis[1]<=dis[2]&&dis[1]<=dis[3]){
                distanceMin=1;
            }
            else if(dis[2]<=dis[1]&&dis[2]<=dis[0]&&dis[2]<=dis[3]){
                distanceMin=2;
            }
            else{
                distanceMin=3;
            }
            if(i==distanceMin){
                importance_Degree[i]=importance_Degree[i]+important_number[7];
            }
        }
    }
    if(importance_Degree[0]>=importance_Degree[1]&&
       importance_Degree[0]>=importance_Degree[2]&&
       importance_Degree[0]>=importance_Degree[3]){
        return 4*color+0;
       }
    else if(importance_Degree[1]>=importance_Degree[0]&&
       importance_Degree[1]>=importance_Degree[2]&&
       importance_Degree[1]>=importance_Degree[3]){
        return 4*color+1;
       }
    else if(importance_Degree[2]>=importance_Degree[1]&&
       importance_Degree[2]>=importance_Degree[0]&&
       importance_Degree[2]>=importance_Degree[3]){
        return 4*color+2;
       }
    else if(importance_Degree[3]>=importance_Degree[1]&&
       importance_Degree[3]>=importance_Degree[2]&&
       importance_Degree[3]>=importance_Degree[0]){
        return 4*color+3;
       }
    return 16;
}
